[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    M117 Cancelling
    M118 Cancelling
    END_PRINT
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    M117 Pausing
    M118 Pausing
    ##### set defaults #####
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(20) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    Go_To_Purge_Location

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    M117 Resuming
    M118 Resuming
    Purge
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro G29]
gcode:
 BED_MESH_CLEAR
 BED_MESH_CALIBRATE

[gcode_macro M600]
gcode:
  PAUSE

[gcode_macro park_hotend]
gcode:
  G1 X40
  M400
  G1 Y181
  M400

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro LON]
gcode:
  SET_LED LED=strip RED=1 GREEN=1 BLUE=1 WHITE=1

[gcode_macro PRINTING]
gcode:
  SET_LED LED=strip RED=1 GREEN=1 BLUE=1 WHITE=1

[gcode_macro LOFF]
gcode:
  SET_LED LED=strip RED=0 GREEN=0 BLUE=0 WHITE=0

[gcode_macro HEATING]
gcode:
  SET_LED LED=strip RED=1 GREEN=0.0314 BLUE=0 SYNC=0 TRANSMIT=1 WHITE=0.5

[gcode_macro DONE]
gcode:
  SET_LED LED=strip RED=1 GREEN=0 BLUE=0.8157 SYNC=0 TRANSMIT=1 WHITE=0.5

[gcode_macro PID_HOTEND]
gcode:
  {% set EXTRUDER_TEMP = params.TEMPERATURE|default(245)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={EXTRUDER_TEMP}

[gcode_macro PID_BED]
gcode:
  {% set BED_TEMP = params.TEMPERATURE|default(110)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}

[gcode_macro SLOW]
gcode:
  M220 S50
  SET_VELOCITY_LIMIT ACCEL=3000

[gcode_macro FAST]
gcode:
  M220 S100
  SET_VELOCITY_LIMIT ACCEL=7500

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(-1)|int %}
    {% set TR_LANE = params.TR_LANE|default(-1)|int %}

    {% if TR_LANE >= 0 %}
    {% if not (0 <= TR_LANE < printer.configfile.config["trad_rack"]["lane_count"]|int) %}
        { action_raise_error("Invalid tradrack lane") }
    {% endif %}
    {% endif %}

    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 PROBE_DOCK_ENABLE=1
    HEATING 

    M117 Setting heater temps
    G90 ; absolute positioning
    M140 S{BED_TEMP} ; set bed temp
    M104 S0 ; Set the extruder to cool before homing and probing
    M400

    ; Homing and leveling
    AUTOHOME

    ; Chamber heating routine
    {% if CHAMBER_TEMP > 0 and printer["temperature_sensor Chamber"].temperature < CHAMBER_TEMP %}
    M106 S255
    G0 X90 Y90 Z15 F3000
    M117 Waiting for Chamber to reach {CHAMBER_TEMP}
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={CHAMBER_TEMP}
    M107
    M400
    {% endif %}

    ; Continue with the rest of the homing
    M117 Waiting for bed
    M190 S{BED_TEMP} ; wait for bed temp
    M400

    M117 Z Tilt Adjust
    Z_TILT_ADJUST
    M400

    M117 Hot probe
    G29
    Go_To_Purge_Location

    # Heat the extruder
    M117 Heating and waiting for hotend
    M109 S{EXTRUDER_TEMP} ; set extruder temp
    M400

    # ; Load the filament from TradRack
    # {% if TR_LANE >= 0 %}
    # CLEAR_PAUSE
    # TR_HOME
    # TR_LOAD_LANE LANE={TR_LANE}
    
    # # When it's not the active lane, load it and set it to the current lane
    # {% if printer.trad_rack.active_lane != TR_LANE %}
    #     TR_LOAD_TOOLHEAD LANE={TR_LANE}
    #     Wipe_Nozzle
    #     TR_SET_ACTIVE_LANE LANE={TR_LANE}
    # {% endif %}

    # TR_LOCATE_SELECTOR
    
    # {% endif %}

    # The purge
    Go_To_Purge_Location
    M400

    M117 Moving Z to top
    G0 Z1
    M400

    M117 Cleaning nozzle
    Purge
    M400

    M117 Print Started
    PRINTING

[gcode_macro END_PRINT]
gcode:
    G91
    G1 Z5 ; Raise z slightly
    M400
    G90
    Go_To_Purge_Location
    # TR_UNLOAD_TOOLHEAD
    Wipe_Nozzle

    ; retract a bit
    M400
    M83
    G1 E-10 F300
    M400

    M104 S0 ; turn off extruder
    M140 S0 ; turn off bed
    M106 S0 ; turn off fan
    M400

    M18 Y X E ; disable motors except Z
    DONE

[gcode_macro AUTOHOME]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
      M117 Already homed
      M118 Already homed
    {% else %}
      G28
    {% endif %}

[gcode_macro BUZZ]
gcode:
    {% set MOTOR = params.STEPPER|default(stepper_x)|string %}
    {% if MOTOR == 'x' %}
        {% set MOTOR = 'stepper_x' %}
    {% endif %}
    {% if MOTOR == 'x1' %}
        {% set MOTOR = 'stepper_x1' %}
    {% endif %}
    {% if MOTOR == 'y' %}
        {% set MOTOR = 'stepper_y' %}
    {% endif %}
    {% if MOTOR == 'y1' %}
        {% set MOTOR = 'stepper_y1' %}
    {% endif %}
    {% if MOTOR == 'z' %}
        {% set MOTOR = 'stepper_z' %}
    {% endif %}
    {% if MOTOR == 'z1' %}
        {% set MOTOR = 'stepper_z1' %}
    {% endif %}
    {% if MOTOR == 'z2' %}
        {% set MOTOR = 'stepper_z2' %}
    {% endif %}
    STEPPER_BUZZ stepper={MOTOR}


[gcode_macro PA]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005